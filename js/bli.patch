diff --git a/js/script.js b/js/script.js
index f32a547..bcca3a1 100644
--- a/js/script.js
+++ b/js/script.js
@@ -2,16 +2,16 @@
 
 
 // let restaurant = {
-// 	id: null,
-// 	name: null,
-// 	reviews: [{
-// 		rating: null,
-// 		comment: null
-// 	}],
-// 	loc: {
-// 		lat: null,
-// 		lng: null
-// 	}
+//	id: null,
+//	name: null,
+//	reviews: [{
+//		rating: null,
+//		comment: null
+//	}],
+//	loc: {
+//		lat: null,
+//		lng: null
+//	}
 // }
 
 class Restaurant {
@@ -104,6 +104,23 @@ function updateMenu(bounds, env){
 	}
 }
 
+// myFunction wraps the above API call into a Promise
+// and handles the callbacks with resolve and reject
+
+// now you can use await to get the result from the wrapped api function
+// and you can use standard try-catch to handle the errors
+async function businessLogic() {
+	try {
+		const result = await apiFunctionWrapper("query all users");
+		console.log(result);
+
+		// the next line will fail
+		const result2 = await apiFunctionWrapper("bad query");
+	} catch(error) {
+		console.error("ERROR:" + error);
+	}
+}
+
 async function getRestaurants(env){
 	const data = getJsonData()
 	let restaurants = new Array()
@@ -121,17 +138,27 @@ async function getRestaurants(env){
 		type: ['restaurant']
 	};
 	let service = new google.maps.places.PlacesService(env.map);
-	service.nearbySearch(request, callback);
-	function callback(results, status) {
-		if (status == google.maps.places.PlacesServiceStatus.OK) {
+
+	function nearbySearchSync(query) {
+		return new Promise((resolve, reject) => {
+			service.nearbySearch(query,(successResponse) => {
+				resolve(successResponse);
+			});
+		});
+	}
+
+	function callback(results, status) {}
+
+	try {
+		let results = await nearbySearchSync(request, callback);
 			for (let i = 0; i < results.length; i++) {
 				// createMarker(results[i])
 				restaurants.push(new Restaurant(
 					restaurants.length,
 					results[i].name,
 					[{
-							rating: results[i].rating,
-							comment: ""
+						rating: results[i].rating,
+						comment: ""
 					}],
 					{
 						lat: results[i].geometry.location.lat(),
@@ -139,8 +166,10 @@ async function getRestaurants(env){
 					}
 				))
 			}
-		}
+	} catch (error) {
+		console.log("fatal error");
 	}
+
 	return restaurants
 }
 
@@ -155,50 +184,50 @@ function getPanorama(){
 }
 
 // function placeMarkers(env){
-// 	let infowindow = new google.maps.InfoWindow();
-// 	let streetViewService = new google.maps.StreetViewService();
-// 	google.maps.event.addListener(marker, 'click', function() {
-// 		clickedMarker = marker;
-// 		streetViewService.getPanoramaByLocation(marker.getPosition(), 50, processSVData);
-// 		infowindow.setContent(marker.title);
-// 		infowindow.open(mymap, this);
-// 	})
-// 	let infowindow = new google.maps.InfoWindow();
-// 	for (let marker of env.markers){
-// 		let marker = new google.maps.Marker({
-// 			map: env.map,
-// 			position: place.geometry.location,
-// 			info: {
-// 				name: place.name,
-// 				avg: place.rating
-// 			},
-// 			animation: google.maps.Animation.DROP
-// 		})
-// 	}
-// 	allMarkers.push(marker)
-// 	let content = document.createElement("div");
-// 	let restaurantName = document.createElement("div");
-// 	restaurantName.innerHTML = marker.info.name
-// 	content.appendChild(restaurantName);
-// 	let streetview = document.createElement("div");
-// 	streetview.style.width = "200px";
-// 	streetview.style.height = "200px";
-// 	content.appendChild(streetview);
-// 	let htmlContent = document.createElement("div");
-// 	content.appendChild(htmlContent);
-// 	google.maps.event.addListener(marker, 'click', function() {
-// 		panorama = new google.maps.StreetViewPanorama(streetview, {
-// 			navigationControl: false,
-// 			enableCloseButton: false,
-// 			addressControl: false,
-// 			linksControl: false,
-// 			visible: true
-// 		});
-// 		clickedMarker = marker;
-// 		streetViewService.getPanoramaByLocation(marker.getPosition(), 50, processSVData);
-// 		infowindow.setContent(content);
-// 		infowindow.open(mymap, this);
-// 	})
+//	let infowindow = new google.maps.InfoWindow();
+//	let streetViewService = new google.maps.StreetViewService();
+//	google.maps.event.addListener(marker, 'click', function() {
+//		clickedMarker = marker;
+//		streetViewService.getPanoramaByLocation(marker.getPosition(), 50, processSVData);
+//		infowindow.setContent(marker.title);
+//		infowindow.open(mymap, this);
+//	})
+//	let infowindow = new google.maps.InfoWindow();
+//	for (let marker of env.markers){
+//		let marker = new google.maps.Marker({
+//			map: env.map,
+//			position: place.geometry.location,
+//			info: {
+//				name: place.name,
+//				avg: place.rating
+//			},
+//			animation: google.maps.Animation.DROP
+//		})
+//	}
+//	allMarkers.push(marker)
+//	let content = document.createElement("div");
+//	let restaurantName = document.createElement("div");
+//	restaurantName.innerHTML = marker.info.name
+//	content.appendChild(restaurantName);
+//	let streetview = document.createElement("div");
+//	streetview.style.width = "200px";
+//	streetview.style.height = "200px";
+//	content.appendChild(streetview);
+//	let htmlContent = document.createElement("div");
+//	content.appendChild(htmlContent);
+//	google.maps.event.addListener(marker, 'click', function() {
+//		panorama = new google.maps.StreetViewPanorama(streetview, {
+//			navigationControl: false,
+//			enableCloseButton: false,
+//			addressControl: false,
+//			linksControl: false,
+//			visible: true
+//		});
+//		clickedMarker = marker;
+//		streetViewService.getPanoramaByLocation(marker.getPosition(), 50, processSVData);
+//		infowindow.setContent(content);
+//		infowindow.open(mymap, this);
+//	})
 // }
 
 function createMarkers(env) {
@@ -248,8 +277,7 @@ function processSVData(data, status) {
 	}
 }
 
-function main(myLatLng){
-	let ok = false;
+async function main(myLatLng){
 	let env = {
 		clickedMarker: null,
 		panorama: null,
@@ -258,14 +286,11 @@ function main(myLatLng){
 		restaurants: new Array(),
 		markers: new Array()
 	} 
-	env.restaurants = getRestaurants(env)
+	env.restaurants = await getRestaurants(env)
+	env.markers = createMarkers(env)
+	console.log(env.restaurants)
 	// placeMarkers(env)
 	google.maps.event.addListener(env.map, 'bounds_changed', function() {
-		if (ok === false){
-			env.markers = createMarkers(env)
-			console.log("bobi")
-			ok = true;
-		}
 		updateMenu(env.map.getBounds(), env)
 	})
 }
